Control node requirements:-(Master)
For your control node (the machine that runs Ansible), you can use nearly any UNIX-like machine with Python installed. This includes Red Hat, Debian, Ubuntu, macOS, BSDs, and Windows under a Windows Subsystem for Linux (WSL) distribution. Windows without WSL is not natively supported as a control node; see Matt Davis’ blog post for more information.

Managed node requirements:-(Clients)
The managed node (the machine that Ansible is managing) does not require Ansible to be installed, but requires Python to run Ansible-generated Python code. The managed node also needs a user account that can connect through SSH to the node with an interactive POSIX shell.

Step1:-Install Ansible setup / Install EPEL repository
• yum install ansible
• yum -y install epel-release
• yum update
• yum -y install ansible openss
===========================================================================
Setup password less authontication between LINUX/UNIX servers
EX we are having 3 server.
1)server1 (node0)
2)server2 (node1)
3)Server3 (node3)

Step1:- Genrate public keys on eavery server.
#ssh-keygen     (node0,node1,node2)
#cd .ssh     or cat .ssh/id_rsa.pub >> authorized_key
#cat id_rsa.pub >>authorized_keys   ---- Alos copy other 2 nodes Public key in this file.
Try password less ssh to all nodes.

==============================================================================
Add IP / Hostnames to /etc/ansible/hosts file, As per saggrigation Application and DB servers

Example
[Ansible_server]
node0

[APP]
noed1

[DB]
node2
====================Ping command (For every unix shell Action use flag -m)===================================================
Command for check all hosts are able to ping or not:-
#ansible all -m ping
node0 | SUCCESS => {
    "ansible_facts": {
        "discovered_interpreter_python": "/usr/bin/python3"
    },
    "changed": false,
    "ping": "pong"
}
node1 | SUCCESS => {
    "ansible_facts": {
        "discovered_interpreter_python": "/usr/bin/python3"
    },
    "changed": false,
    "ping": "pong"
}
node2 | SUCCESS => {
    "ansible_facts": {
        "discovered_interpreter_python": "/usr/bin/python3"
    },
    "changed": false,
    "ping": "pong"
}
----------------------------------------------------------------------
Command for spacific Applicatipon host ping test
#[root@node0 .ssh]# ansible APP -m ping
node1 | SUCCESS => {
    "ansible_facts": {
        "discovered_interpreter_python": "/usr/bin/python3"
    },
    "changed": false,
    "ping": "pong"
}
-------------------------------------------------------------------------
Ping only Ansible Control node itselfs:-
[root@node0 .ssh]# ansible Ansible_server -m ping
node0 | SUCCESS => {
    "ansible_facts": {
        "discovered_interpreter_python": "/usr/bin/python3"
    },
    "changed": false,
    "ping": "pong"
}
==============================================================================================
Play book is an script in Ansible which we are storing using .yml format

Example:=
#vi appache_install.yml
hosts: APP 
become: yes 
tasks:
- name: install apache
yum: name=httpd state=latest

#chmod 755 appache_install.yml         -----Change permision to executable
#ansible-playbook appache_install.yml
